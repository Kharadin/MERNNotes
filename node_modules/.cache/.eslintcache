[{"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/index.js":"1","/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/App.js":"2","/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/components/Header.js":"3","/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/pages/notesListPage.js":"4","/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/assets/data.js":"5","/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/components/ListItem.js":"6","/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/pages/NotePage.js":"7","/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/pages/NotesListPage.js":"8","/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/components/AddButton.js":"9","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/index.js":"10","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/App.js":"11","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/pages/NotesListPage.js":"12","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/pages/NotePage.js":"13","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/components/Header.js":"14","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/components/ListItem.js":"15","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/components/AddButton.js":"16","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/index.js":"17","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/App.js":"18","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/components/Header.js":"19","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/pages/NotesListPage.js":"20","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/pages/NotePage.js":"21","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/components/AddButton.js":"22","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/components/ListItem.js":"23"},{"size":237,"mtime":1652706275509,"results":"24","hashOfConfig":"25"},{"size":726,"mtime":1652717789407,"results":"26","hashOfConfig":"25"},{"size":143,"mtime":1652687681936,"results":"27","hashOfConfig":"25"},{"size":439,"mtime":1652282697637,"results":"28","hashOfConfig":"25"},{"size":493,"mtime":1652279692083,"results":"29","hashOfConfig":"25"},{"size":1030,"mtime":1652865333437,"results":"30","hashOfConfig":"25"},{"size":3323,"mtime":1652787133906,"results":"31","hashOfConfig":"25"},{"size":1213,"mtime":1652720726801,"results":"32","hashOfConfig":"25"},{"size":281,"mtime":1652719411414,"results":"33","hashOfConfig":"25"},{"size":237,"mtime":1652706275509,"results":"34","hashOfConfig":"35"},{"size":726,"mtime":1652717789407,"results":"36","hashOfConfig":"35"},{"size":1540,"mtime":1653480533623,"results":"37","hashOfConfig":"35"},{"size":5365,"mtime":1653654873024,"results":"38","hashOfConfig":"35"},{"size":143,"mtime":1652687681936,"results":"39","hashOfConfig":"35"},{"size":1031,"mtime":1653247575217,"results":"40","hashOfConfig":"35"},{"size":281,"mtime":1652719411414,"results":"41","hashOfConfig":"35"},{"size":237,"mtime":1652706275509,"results":"42","hashOfConfig":"43"},{"size":726,"mtime":1652717789407,"results":"44","hashOfConfig":"43"},{"size":205,"mtime":1653896716211,"results":"45","hashOfConfig":"43"},{"size":1573,"mtime":1653896686522,"results":"46","hashOfConfig":"43"},{"size":5429,"mtime":1653744823599,"results":"47","hashOfConfig":"43"},{"size":281,"mtime":1652719411414,"results":"48","hashOfConfig":"43"},{"size":1031,"mtime":1653247575217,"results":"49","hashOfConfig":"43"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7tv5o3",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"159vyt9",{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ydvp0m",{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/index.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/App.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/components/Header.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/pages/notesListPage.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/assets/data.js",[],[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/components/ListItem.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/pages/NotePage.js",["123"],[],"import React, {useEffect, useState} from 'react'\nimport { useParams } from 'react-router-dom';\n// import notes from '../assets/data';\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\n\nimport { useNavigate} from \"react-router-dom\"\n\n\nconst NotePage = ({history}) => {\n  // let {id} = useParams();\n \n\n  let noteId= useParams().id;\n  \n  const navigate = useNavigate()\n\n  // useParams() Returns an object of key/value pairs of the dynamic params from the current URL that were matched by the route path.\n  //console.log(props);\n  //console.log(useParams);\n   console.log(noteId);\n\n  \n  // let note = notes.find(note => note.id === Number(noteId));\n  \n  let [note, setNote] = useState (null)\n  // useState should be set at the top level of the component and never inside the useEffect\n\n   useEffect(() => {\n    getNote()\n     }, [])\n     // was [noteId]\n\n    \n    let getNote = async () => {\n      if (noteId === 'new') return\n      let response = await fetch (`http://localhost:8000/notes/${noteId}`)\n      console.log(response)\n      let data =  await response.json()\n      console.log('data from response: ', data)\n       setNote(data)\n      \n    }\n    \n // console.log(note)\n\n  let createNote = async () => {\n    await fetch(`http://localhost:8000/notes/`, {\n      method: 'POST',\n      headers: {\n           'Content-type': 'application/json'\n      },\n      body: JSON.stringify({...note, 'updated': new Date()})\n\n    })\n}\n\n   let updateNote = async () => {\n       await fetch(`http://localhost:8000/notes/${noteId}`, {\n         method: 'PUT',\n         headers: {\n              'Content-type': 'application/json'\n         },\n         body: JSON.stringify({...note, 'updated': new Date()})\n\n       })\n   }\n\n   let deleteNote = async (e) => {\n        await fetch(`http://localhost:8000/notes/${noteId}`, {\n          method: 'DELETE',\n          headers: {\n              'Content-type': 'application/json'\n          },\n          body: JSON.stringify(note)\n\n        })\n        // e.preventDefault()\n        navigate('/')\n   }\n\n   let handleSubmit = (e) => {\n    e.preventDefault()\n     console.log(\"handlesubmit fired\")\n     //console.log ('id and body:', noteId, note.body)\n\n     if (noteId ==='new' && note == null) {\n       navigate('/')\n       return\n     } else if \n      (noteId === 'new' && note.body !==null){\n       createNote();\n       console.log('create')\n\n      } else if (noteId !== 'new' && note.body === ''){\n        deleteNote ();\n        console.log('delete')\n      } \n      else if (noteId !== 'new' && note.body !==null) {\n        updateNote();\n        console.log('update')\n      }    \n      \n      console.log('out of ifs')\n       navigate(\"/\")\n   }\n\n  return (\n    <div className='note'>\n\n      <div className='note-header'>\n         <h3>\n            <Link to=\"\">\n              <ArrowLeft onClick={handleSubmit}/>\n            </Link>\n\n         </h3>\n          {noteId !=='new' ? (\n                <button onClick= {deleteNote}>Delete</button>\n          ): ( \n                <button onClick ={handleSubmit}>Done</button>\n          )}\n\n      </div>\n      <textarea value= {note?.body} onChange ={(e) => setNote({...note, 'body':e.target.value})}   >\n      {/* // if there is... */}\n        </textarea>\n    </div>\n  )\n}\n\nexport default NotePage\n","/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/pages/NotesListPage.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/components/AddButton.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/index.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/App.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/pages/NotesListPage.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/pages/NotePage.js",["124"],[],"import React, {useEffect, useState} from 'react'\nimport { useParams } from 'react-router-dom';\n// import notes from '../assets/data';\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\nimport { useNavigate} from \"react-router-dom\"\nimport Axios from \"axios\"\n//import { response } from 'express';\n\nconst NotePage = ({history}) => {\n  // let {id} = useParams();\n \n\n  let noteId= useParams().id;\n  // useParams() Returns an object of key/value pairs of the dynamic params from the current URL that were matched by the route path.\n  // id is for number that takes it's place., comes  from ListItem.\n  \n  const navigate = useNavigate()\n\n  //console.log(props);\n  //console.log(useParams);\n   console.log('NoteId: ', noteId);\n\n  \n  // let note = notes.find(note => note.id === Number(noteId));\n  \n  let [note, setNote] = useState (null)\n  // useState should be set at the top level of the component and never inside the useEffect\n\n   useEffect(() => {\n    getNote()\n     }, [])\n     // was [noteId]\n\n        \n\n     let getNote = async () => {\n      if (noteId === 'new') return\n      let response = await Axios.get('http://localhost:3001/getNote', \n      { params: {\n         _id:noteId,\n           } \n      })\n      let data = await response.data\n      setNote(data);\n      console.log(' Get data:', data)\n  }\n\n    // let getNote = async () => {\n    //   if (noteId === 'new') return\n    //   let response = await fetch (`http://localhost:8000/notes/${noteId}`)\n    //   console.log(response)\n    //   let data =  await response.json()\n    //   console.log('data from response: ', data)\n    //    setNote(data)\n      \n    // }\n    \n // console.log(note)\n\n\n const createNote = () => {Axios.post('http://localhost:3001/createNote', \n          {\n            body: note.body,\n            //updated: new Date()\n              } \n        ).then(\n           response => {\n             console.log(response);\n             // can be passage to notes to make quicker data update on the list page..... \n            }, \n            error => {\n              alert(error);\n            } );\n  };\n\n\n\n\n//   let createNote = async () => {\n//     await fetch(`http://localhost:8000/notes/`, {\n//       method: 'POST',\n//       headers: {\n//            'Content-type': 'application/json'\n//       },\n//       body: JSON.stringify({...note, 'updated': new Date()})\n\n//     })\n// }\n\n\n\nlet updateNote = async () => {\n  \n  //let response = \n  await Axios.put('http://localhost:3001/updateNote', \n  { \n     _id: noteId,\n     body: note.body,\n  })\n  console.log('update request sent')\n // let data = await response.data\n  // maybe the above makes it slower? but if not, will the list be updated in time ?\n // console.log('update response data:', data)\n}\n\n\n  //  async function updateNote() {\n  //   await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //     method: 'PUT',\n  //     headers: {\n  //       'Content-type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ ...note, 'updated': new Date() })\n  //   });\n  // }\n\n  // { params: {\n  //   _id:noteId,\n  //     } \n\nlet deleteNote = async ()=> {\n  let response = await Axios.delete('http://localhost:3001/deleteNote', \n  // with await,  was added here, the console log received the proper responce\n  { data: {\n    // another option was params: and req.query._id on the express side.\n    _id:noteId,\n      } \n })\n //  .then ((response) => {\n   //    // this handling still doesn't work... \n   //       console.log('response from delete req: ', response.data)\n   //         },\n   //           error => {\n     //             console.log(error)\n     //           }  \n     //           )\n     console.log('delete request sent')\n     console.log('response from delete req: ', response.data)\n  navigate('/')\n}\n\n\n  //  let deleteNote = async (e) => {\n  //       await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //         method: 'DELETE',\n  //         headers: {\n  //             'Content-type': 'application/json'\n  //         },\n  //         body: JSON.stringify(note)\n\n  //       })\n  //       // e.preventDefault()\n  //       navigate('/')\n  //  }\n\n   async function handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"handlesubmit fired\");\n    //console.log ('id and body:', noteId, note.body)\n    if (noteId === 'new' && note == null) {\n      navigate('/');\n      return;\n    } else if (noteId === 'new' && note.body !== null) {\n      createNote();\n      console.log('create');\n\n    } else if (noteId !== 'new' && note.body === '') {\n      deleteNote();\n      console.log('delete');\n    }\n    else if (noteId !== 'new' && note.body !== null) {\n      updateNote();\n      console.log('update');\n\n    }\n\n    console.log('out of ifs');\n    navigate(\"/\");\n  }\n\n  return (\n    <div className='note'>\n\n      <div className='note-header'>\n         <h3>\n            <Link to=\"\">\n              <ArrowLeft onClick={handleSubmit}/>\n            </Link>\n\n         </h3>\n          {noteId !=='new' ? (\n                <button onClick= {deleteNote}>Delete</button>\n          ): ( \n                <button onClick ={handleSubmit}>Done</button>\n          )}\n\n      </div>\n      <textarea value= {note?.body} onChange ={(e) => setNote({...note, 'body':e.target.value})}   >\n      {/* // if there is... */}\n        </textarea>\n    </div>\n  )\n}\n\nexport default NotePage\n","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/components/Header.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/components/ListItem.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/components/AddButton.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/index.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/App.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/components/Header.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/pages/NotesListPage.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/pages/NotePage.js",["125"],[],"import React, {useEffect, useState} from 'react'\nimport { useParams } from 'react-router-dom';\n// import notes from '../assets/data';\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\nimport { useNavigate} from \"react-router-dom\"\nimport Axios from \"axios\"\n//import { response } from 'express';\n\nconst NotePage = ({history}) => {\n  // let {id} = useParams();\n \n\n  let noteId= useParams().id;\n  // useParams() Returns an object of key/value pairs of the dynamic params from the current URL that were matched by the route path.\n  // id is for number that takes it's place., comes  from ListItem.\n  \n  const navigate = useNavigate()\n\n  //console.log(props);\n  //console.log(useParams);\n   console.log('NoteId: ', noteId);\n\n  \n  // let note = notes.find(note => note.id === Number(noteId));\n  \n  let [note, setNote] = useState (null)\n  // useState should be set at the top level of the component and never inside the useEffect\n\n   useEffect(() => {\n    getNote()\n     }, [])\n     // was [noteId]\n\n        \n\n     let getNote = async () => {\n      if (noteId === 'new') return\n      let response = await Axios.get('https://notesmern220527.herokuapp.com/getNote', \n      { params: {\n         _id:noteId,\n           } \n      })\n      let data = await response.data\n      setNote(data);\n      console.log(' Get data:', data)\n  }\n\n    // let getNote = async () => {\n    //   if (noteId === 'new') return\n    //   let response = await fetch (`http://localhost:8000/notes/${noteId}`)\n    //   console.log(response)\n    //   let data =  await response.json()\n    //   console.log('data from response: ', data)\n    //    setNote(data)\n      \n    // }\n    \n // console.log(note)\n\n\n const createNote = () => {Axios.post('https://notesmern220527.herokuapp.com/createNote', \n          {\n            body: note.body,\n            //updated: new Date()\n              } \n        ).then(\n           response => {\n             console.log(response);\n             // can be passage to notes to make quicker data update on the list page..... \n            }, \n            error => {\n              alert(error);\n            } );\n  };\n\n\n\n\n//   let createNote = async () => {\n//     await fetch(`http://localhost:8000/notes/`, {\n//       method: 'POST',\n//       headers: {\n//            'Content-type': 'application/json'\n//       },\n//       body: JSON.stringify({...note, 'updated': new Date()})\n\n//     })\n// }\n\n\n\nlet updateNote = async () => {\n  \n  //let response = \n  await Axios.put('https://notesmern220527.herokuapp.com/updateNote', \n  { \n     _id: noteId,\n     body: note.body,\n  })\n  console.log('update request sent')\n // let data = await response.data\n  // maybe the above makes it slower? but if not, will the list be updated in time ?\n // console.log('update response data:', data)\n}\n\n\n  //  async function updateNote() {\n  //   await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //     method: 'PUT',\n  //     headers: {\n  //       'Content-type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ ...note, 'updated': new Date() })\n  //   });\n  // }\n\n  // { params: {\n  //   _id:noteId,\n  //     } \n\nlet deleteNote = async ()=> {\n  let response = await Axios.delete('https://notesmern220527.herokuapp.com/deleteNote', \n  // with await,  was added here, the console log received the proper responce\n  { data: {\n    // another option was params: and req.query._id on the express side.\n    _id:noteId,\n      } \n })\n //  .then ((response) => {\n   //    // this handling still doesn't work... \n   //       console.log('response from delete req: ', response.data)\n   //         },\n   //           error => {\n     //             console.log(error)\n     //           }  \n     //           )\n     console.log('delete request sent')\n     console.log('response from delete req: ', response.data)\n  navigate('/')\n}\n\n\n  //  let deleteNote = async (e) => {\n  //       await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //         method: 'DELETE',\n  //         headers: {\n  //             'Content-type': 'application/json'\n  //         },\n  //         body: JSON.stringify(note)\n\n  //       })\n  //       // e.preventDefault()\n  //       navigate('/')\n  //  }\n\n   async function handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"handlesubmit fired\");\n    //console.log ('id and body:', noteId, note.body)\n    if (noteId === 'new' && note == null) {\n      navigate('/');\n      return;\n    } else if (noteId === 'new' && note.body !== null) {\n      createNote();\n      console.log('create');\n\n    } else if (noteId !== 'new' && note.body === '') {\n      deleteNote();\n      console.log('delete');\n    }\n    else if (noteId !== 'new' && note.body !== null) {\n      updateNote();\n      console.log('update');\n\n    }\n\n    console.log('out of ifs');\n    navigate(\"/\");\n  }\n\n  return (\n    <div className='note'>\n\n      <div className='note-header'>\n         <h3>\n            <Link to=\"\">\n              <ArrowLeft onClick={handleSubmit}/>\n            </Link>\n\n         </h3>\n          {noteId !=='new' ? (\n                <button onClick= {deleteNote}>Delete</button>\n          ): ( \n                <button onClick ={handleSubmit}>Done</button>\n          )}\n\n      </div>\n      <textarea value= {note?.body} onChange ={(e) => setNote({...note, 'body':e.target.value})}   >\n      {/* // if there is... */}\n        </textarea>\n    </div>\n  )\n}\n\nexport default NotePage\n","/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/components/AddButton.js",[],[],"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/components/ListItem.js",[],[],{"ruleId":"126","severity":1,"message":"127","line":31,"column":9,"nodeType":"128","endLine":31,"endColumn":11,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"127","line":32,"column":9,"nodeType":"128","endLine":32,"endColumn":11,"suggestions":"130"},{"ruleId":"126","severity":1,"message":"127","line":32,"column":9,"nodeType":"128","endLine":32,"endColumn":11,"suggestions":"131"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNote'. Either include it or remove the dependency array.","ArrayExpression",["132"],["133"],["134"],{"desc":"135","fix":"136"},{"desc":"135","fix":"137"},{"desc":"135","fix":"138"},"Update the dependencies array to be: [getNote]",{"range":"139","text":"140"},{"range":"141","text":"140"},{"range":"142","text":"140"},[886,888],"[getNote]",[1028,1030],[1028,1030]]