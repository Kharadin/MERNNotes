{"ast":null,"code":"import _objectSpread from\"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/node_modules/@babel/runtime/regenerator/index.js\";import React,{useEffect,useState}from'react';import{useParams}from'react-router-dom';// import notes from '../assets/data';\nimport{Link}from'react-router-dom';import{ReactComponent as ArrowLeft}from'../assets/arrow-left.svg';import{useNavigate}from\"react-router-dom\";import Axios from\"axios\";//import { response } from 'express';\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var NotePage=function NotePage(_ref){var history=_ref.history;// let {id} = useParams();\nvar noteId=useParams().id;// useParams() Returns an object of key/value pairs of the dynamic params from the current URL that were matched by the route path.\n// id is for number that takes it's place., comes  from ListItem.\nvar navigate=useNavigate();//console.log(props);\n//console.log(useParams);\nconsole.log('NoteId: ',noteId);// let note = notes.find(note => note.id === Number(noteId));\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),note=_useState2[0],setNote=_useState2[1];// useState should be set at the top level of the component and never inside the useEffect\nuseEffect(function(){getNote();},[]);// was [noteId]\nvar getNote=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(noteId==='new')){_context.next=2;break;}return _context.abrupt(\"return\");case 2:_context.next=4;return Axios.get('https://notesmern220527.herokuapp.com/getNote',{params:{_id:noteId}});case 4:response=_context.sent;_context.next=7;return response.data;case 7:data=_context.sent;setNote(data);console.log(' Get data:',data);case 10:case\"end\":return _context.stop();}}},_callee);}));return function getNote(){return _ref2.apply(this,arguments);};}();// let getNote = async () => {\n//   if (noteId === 'new') return\n//   let response = await fetch (`http://localhost:8000/notes/${noteId}`)\n//   console.log(response)\n//   let data =  await response.json()\n//   console.log('data from response: ', data)\n//    setNote(data)\n// }\n// console.log(note)\nvar createNote=function createNote(){Axios.post('https://notesmern220527.herokuapp.com/createNote',{body:note.body//updated: new Date()\n}).then(function(response){console.log(response);// can be passage to notes to make quicker data update on the list page..... \n},function(error){alert(error);});};//   let createNote = async () => {\n//     await fetch(`http://localhost:8000/notes/`, {\n//       method: 'POST',\n//       headers: {\n//            'Content-type': 'application/json'\n//       },\n//       body: JSON.stringify({...note, 'updated': new Date()})\n//     })\n// }\nvar updateNote=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Axios.put('https://notesmern220527.herokuapp.com/updateNote',{_id:noteId,body:note.body});case 2:console.log('update request sent');// let data = await response.data\n// maybe the above makes it slower? but if not, will the list be updated in time ?\n// console.log('update response data:', data)\ncase 3:case\"end\":return _context2.stop();}}},_callee2);}));return function updateNote(){return _ref3.apply(this,arguments);};}();//  async function updateNote() {\n//   await fetch(`http://localhost:8000/notes/${noteId}`, {\n//     method: 'PUT',\n//     headers: {\n//       'Content-type': 'application/json'\n//     },\n//     body: JSON.stringify({ ...note, 'updated': new Date() })\n//   });\n// }\n// { params: {\n//   _id:noteId,\n//     } \nvar deleteNote=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return Axios.delete('https://notesmern220527.herokuapp.com/deleteNote',// with await,  was added here, the console log received the proper responce\n{data:{// another option was params: and req.query._id on the express side.\n_id:noteId}});case 2:response=_context3.sent;//  .then ((response) => {\n//    // this handling still doesn't work... \n//       console.log('response from delete req: ', response.data)\n//         },\n//           error => {\n//             console.log(error)\n//           }  \n//           )\nconsole.log('delete request sent');console.log('response from delete req: ',response.data);navigate('/');case 6:case\"end\":return _context3.stop();}}},_callee3);}));return function deleteNote(){return _ref4.apply(this,arguments);};}();//  let deleteNote = async (e) => {\n//       await fetch(`http://localhost:8000/notes/${noteId}`, {\n//         method: 'DELETE',\n//         headers: {\n//             'Content-type': 'application/json'\n//         },\n//         body: JSON.stringify(note)\n//       })\n//       // e.preventDefault()\n//       navigate('/')\n//  }\nfunction handleSubmit(_x){return _handleSubmit.apply(this,arguments);}function _handleSubmit(){_handleSubmit=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(e){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:e.preventDefault();console.log(\"handlesubmit fired\");//console.log ('id and body:', noteId, note.body)\nif(!(noteId==='new'&&note==null)){_context4.next=7;break;}navigate('/');return _context4.abrupt(\"return\");case 7:if(noteId==='new'&&note.body!==null){createNote();console.log('create');}else if(noteId!=='new'&&note.body===''){deleteNote();console.log('delete');}else if(noteId!=='new'&&note.body!==null){updateNote();console.log('update');}case 8:console.log('out of ifs');navigate(\"/\");case 10:case\"end\":return _context4.stop();}}},_callee4);}));return _handleSubmit.apply(this,arguments);}return/*#__PURE__*/_jsxs(\"div\",{className:\"note\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"note-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:/*#__PURE__*/_jsx(Link,{to:\"\",children:/*#__PURE__*/_jsx(ArrowLeft,{onClick:handleSubmit})})}),noteId!=='new'?/*#__PURE__*/_jsx(\"button\",{onClick:deleteNote,children:\"Delete\"}):/*#__PURE__*/_jsx(\"button\",{onClick:handleSubmit,children:\"Done\"})]}),/*#__PURE__*/_jsx(\"textarea\",{value:note===null||note===void 0?void 0:note.body,onChange:function onChange(e){return setNote(_objectSpread(_objectSpread({},note),{},{'body':e.target.value}));}})]});};export default NotePage;","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","ReactComponent","ArrowLeft","useNavigate","Axios","NotePage","history","noteId","id","navigate","console","log","note","setNote","getNote","get","params","_id","response","data","createNote","post","body","then","error","alert","updateNote","put","deleteNote","delete","handleSubmit","e","preventDefault","target","value"],"sources":["/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo_d/client/src/pages/NotePage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { useParams } from 'react-router-dom';\n// import notes from '../assets/data';\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\nimport { useNavigate} from \"react-router-dom\"\nimport Axios from \"axios\"\n//import { response } from 'express';\n\nconst NotePage = ({history}) => {\n  // let {id} = useParams();\n \n\n  let noteId= useParams().id;\n  // useParams() Returns an object of key/value pairs of the dynamic params from the current URL that were matched by the route path.\n  // id is for number that takes it's place., comes  from ListItem.\n  \n  const navigate = useNavigate()\n\n  //console.log(props);\n  //console.log(useParams);\n   console.log('NoteId: ', noteId);\n\n  \n  // let note = notes.find(note => note.id === Number(noteId));\n  \n  let [note, setNote] = useState (null)\n  // useState should be set at the top level of the component and never inside the useEffect\n\n   useEffect(() => {\n    getNote()\n     }, [])\n     // was [noteId]\n\n        \n\n     let getNote = async () => {\n      if (noteId === 'new') return\n      let response = await Axios.get('https://notesmern220527.herokuapp.com/getNote', \n      { params: {\n         _id:noteId,\n           } \n      })\n      let data = await response.data\n      setNote(data);\n      console.log(' Get data:', data)\n  }\n\n    // let getNote = async () => {\n    //   if (noteId === 'new') return\n    //   let response = await fetch (`http://localhost:8000/notes/${noteId}`)\n    //   console.log(response)\n    //   let data =  await response.json()\n    //   console.log('data from response: ', data)\n    //    setNote(data)\n      \n    // }\n    \n // console.log(note)\n\n\n const createNote = () => {Axios.post('https://notesmern220527.herokuapp.com/createNote', \n          {\n            body: note.body,\n            //updated: new Date()\n              } \n        ).then(\n           response => {\n             console.log(response);\n             // can be passage to notes to make quicker data update on the list page..... \n            }, \n            error => {\n              alert(error);\n            } );\n  };\n\n\n\n\n//   let createNote = async () => {\n//     await fetch(`http://localhost:8000/notes/`, {\n//       method: 'POST',\n//       headers: {\n//            'Content-type': 'application/json'\n//       },\n//       body: JSON.stringify({...note, 'updated': new Date()})\n\n//     })\n// }\n\n\n\nlet updateNote = async () => {\n  \n  //let response = \n  await Axios.put('https://notesmern220527.herokuapp.com/updateNote', \n  { \n     _id: noteId,\n     body: note.body,\n  })\n  console.log('update request sent')\n // let data = await response.data\n  // maybe the above makes it slower? but if not, will the list be updated in time ?\n // console.log('update response data:', data)\n}\n\n\n  //  async function updateNote() {\n  //   await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //     method: 'PUT',\n  //     headers: {\n  //       'Content-type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ ...note, 'updated': new Date() })\n  //   });\n  // }\n\n  // { params: {\n  //   _id:noteId,\n  //     } \n\nlet deleteNote = async ()=> {\n  let response = await Axios.delete('https://notesmern220527.herokuapp.com/deleteNote', \n  // with await,  was added here, the console log received the proper responce\n  { data: {\n    // another option was params: and req.query._id on the express side.\n    _id:noteId,\n      } \n })\n //  .then ((response) => {\n   //    // this handling still doesn't work... \n   //       console.log('response from delete req: ', response.data)\n   //         },\n   //           error => {\n     //             console.log(error)\n     //           }  \n     //           )\n     console.log('delete request sent')\n     console.log('response from delete req: ', response.data)\n  navigate('/')\n}\n\n\n  //  let deleteNote = async (e) => {\n  //       await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //         method: 'DELETE',\n  //         headers: {\n  //             'Content-type': 'application/json'\n  //         },\n  //         body: JSON.stringify(note)\n\n  //       })\n  //       // e.preventDefault()\n  //       navigate('/')\n  //  }\n\n   async function handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"handlesubmit fired\");\n    //console.log ('id and body:', noteId, note.body)\n    if (noteId === 'new' && note == null) {\n      navigate('/');\n      return;\n    } else if (noteId === 'new' && note.body !== null) {\n      createNote();\n      console.log('create');\n\n    } else if (noteId !== 'new' && note.body === '') {\n      deleteNote();\n      console.log('delete');\n    }\n    else if (noteId !== 'new' && note.body !== null) {\n      updateNote();\n      console.log('update');\n\n    }\n\n    console.log('out of ifs');\n    navigate(\"/\");\n  }\n\n  return (\n    <div className='note'>\n\n      <div className='note-header'>\n         <h3>\n            <Link to=\"\">\n              <ArrowLeft onClick={handleSubmit}/>\n            </Link>\n\n         </h3>\n          {noteId !=='new' ? (\n                <button onClick= {deleteNote}>Delete</button>\n          ): ( \n                <button onClick ={handleSubmit}>Done</button>\n          )}\n\n      </div>\n      <textarea value= {note?.body} onChange ={(e) => setNote({...note, 'body':e.target.value})}   >\n      {/* // if there is... */}\n        </textarea>\n    </div>\n  )\n}\n\nexport default NotePage\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}