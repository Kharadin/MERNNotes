{"ast":null,"code":"var _jsxFileName = \"/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/pages/NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom'; // import notes from '../assets/data';\n\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = _ref => {\n  _s();\n\n  let {\n    history\n  } = _ref;\n  // let {id} = useParams();\n  let noteId = useParams().id;\n  const navigate = useNavigate(); // useParams() Returns an object of key/value pairs of the dynamic params from the current URL that were matched by the route path.\n  //console.log(props);\n  //console.log(useParams);\n\n  console.log(noteId); // let note = notes.find(note => note.id === Number(noteId));\n\n  let [note, setNote] = useState(null); // useState should be set at the top level of the component and never inside the useEffect\n\n  useEffect(() => {\n    getNote();\n  }, []); // was [noteId]\n\n  let getNote = async () => {\n    if (noteId === 'new') return;\n    let response = await fetch(`http://localhost:8000/notes/${noteId}`);\n    console.log(response);\n    let data = await response.json();\n    console.log('data from response: ', data);\n    setNote(data);\n  };\n\n  console.log(note);\n\n  let createNote = async () => {\n    await fetch(`http://localhost:8000/notes/`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({ ...note,\n        'updated': new Date()\n      })\n    });\n  };\n\n  let updateNote = async () => {\n    await fetch(`http://localhost:8000/notes/${noteId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({ ...note,\n        'updated': new Date()\n      })\n    });\n  };\n\n  let deleteNote = async e => {\n    await fetch(`http://localhost:8000/notes/${noteId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    }); // e.preventDefault()\n\n    navigate('/');\n  };\n\n  let handleSubmit = e => {\n    e.preventDefault();\n    console.log(noteId, note.body);\n\n    if (noteId === 'new' && note.body !== null) {\n      createNote();\n      console.log('create');\n    } else if (noteId !== 'new' && note.body === '') {\n      deleteNote();\n      console.log('delete');\n    } else if (noteId !== 'new' && note.body !== null) {\n      updateNote();\n      console.log('update');\n    }\n\n    navigate(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"\",\n          children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 10\n      }, this), noteId !== 'new' ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: note === null || note === void 0 ? void 0 : note.body,\n      onChange: e => setNote({ ...note,\n        'body': e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotePage, \"xRslRYhbEpa7IMJ6ZKrs1A6SmbI=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = NotePage;\nexport default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","ReactComponent","ArrowLeft","useNavigate","NotePage","history","noteId","id","navigate","console","log","note","setNote","getNote","response","fetch","data","json","createNote","method","headers","body","JSON","stringify","Date","updateNote","deleteNote","e","handleSubmit","preventDefault","target","value"],"sources":["/Users/dimetrius/Documents/ReactCrashCourse/mynotes/src/pages/NotePage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { useParams } from 'react-router-dom';\n// import notes from '../assets/data';\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\n\nimport { useNavigate} from \"react-router-dom\"\n\n\nconst NotePage = ({history}) => {\n  // let {id} = useParams();\n \n\n  let noteId= useParams().id;\n  \n  const navigate = useNavigate()\n\n  // useParams() Returns an object of key/value pairs of the dynamic params from the current URL that were matched by the route path.\n  //console.log(props);\n  //console.log(useParams);\n   console.log(noteId);\n\n  \n  // let note = notes.find(note => note.id === Number(noteId));\n  \n  let [note, setNote] = useState (null)\n  // useState should be set at the top level of the component and never inside the useEffect\n\n   useEffect(() => {\n    getNote()\n     }, [])\n     // was [noteId]\n\n    \n    let getNote = async () => {\n      if (noteId === 'new') return\n      let response = await fetch (`http://localhost:8000/notes/${noteId}`)\n      console.log(response)\n      let data =  await response.json()\n      console.log('data from response: ', data)\n       setNote(data)\n      \n    }\n    \n  console.log(note)\n\n  let createNote = async () => {\n    await fetch(`http://localhost:8000/notes/`, {\n      method: 'POST',\n      headers: {\n           'Content-type': 'application/json'\n      },\n      body: JSON.stringify({...note, 'updated': new Date()})\n\n    })\n}\n\n   let updateNote = async () => {\n       await fetch(`http://localhost:8000/notes/${noteId}`, {\n         method: 'PUT',\n         headers: {\n              'Content-type': 'application/json'\n         },\n         body: JSON.stringify({...note, 'updated': new Date()})\n\n       })\n   }\n\n   let deleteNote = async (e) => {\n        await fetch(`http://localhost:8000/notes/${noteId}`, {\n          method: 'DELETE',\n          headers: {\n              'Content-type': 'application/json'\n          },\n          body: JSON.stringify(note)\n\n        })\n        // e.preventDefault()\n        navigate('/')\n   }\n\n   let handleSubmit = (e) => {\n    e.preventDefault()\n    console.log (noteId, note.body)\n     if (noteId === 'new' && note.body !==null){\n       createNote();\n       console.log('create')\n      } else if (noteId !== 'new' && note.body === ''){\n        deleteNote ();\n        console.log('delete')\n         } \n      else if (noteId !== 'new' && note.body !==null) {\n       updateNote();\n       console.log('update')\n      }\n\n      \n       navigate(\"/\")\n   }\n\n  return (\n    <div className='note'>\n\n      <div className='note-header'>\n         <h3>\n            <Link  to=\"\">\n              <ArrowLeft onClick={handleSubmit}/>\n            </Link>\n\n         </h3>\n          {noteId !=='new' ? (\n                <button onClick= {deleteNote}>Delete</button>\n          ): ( \n                <button onClick ={handleSubmit}>Done</button>\n          )}\n\n      </div>\n      <textarea value= {note?.body} onChange ={(e) => setNote({...note, 'body':e.target.value})}   >\n      {/* // if there is... */}\n        </textarea>\n    </div>\n  )\n}\n\nexport default NotePage\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}