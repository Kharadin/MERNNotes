{"ast":null,"code":"var _jsxFileName = \"/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/pages/NotePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom'; // import notes from '../assets/data';\n\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg';\nimport { useNavigate } from \"react-router-dom\";\nimport Axios from \"axios\"; //import { response } from 'express';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NotePage = _ref => {\n  _s();\n\n  let {\n    history\n  } = _ref;\n  // let {id} = useParams();\n  let noteId = useParams().id; // useParams() Returns an object of key/value pairs of the dynamic params from the current URL that were matched by the route path.\n  // id is for number that takes it's place., comes  from ListItem.\n\n  const navigate = useNavigate(); //console.log(props);\n  //console.log(useParams);\n\n  console.log('NoteId: ', noteId); // let note = notes.find(note => note.id === Number(noteId));\n\n  let [note, setNote] = useState(null); // useState should be set at the top level of the component and never inside the useEffect\n\n  useEffect(() => {\n    getNote();\n  }, []); // was [noteId]\n\n  let getNote = async () => {\n    if (noteId === 'new') return;\n    let response = await Axios.get('http://localhost:3001/getNote', {\n      params: {\n        _id: noteId\n      }\n    });\n    let data = await response.data;\n    setNote(data);\n    console.log(' Get data:', data);\n  }; // let getNote = async () => {\n  //   if (noteId === 'new') return\n  //   let response = await fetch (`http://localhost:8000/notes/${noteId}`)\n  //   console.log(response)\n  //   let data =  await response.json()\n  //   console.log('data from response: ', data)\n  //    setNote(data)\n  // }\n  // console.log(note)\n\n\n  const createNote = () => {\n    Axios.post('http://localhost:3001/createNote', {\n      body: note.body //updated: new Date()\n\n    }).then(response => {\n      console.log(response); // can be passage to notes to make quicker data update on the list page..... \n    }, error => {\n      alert(error);\n    });\n  }; //   let createNote = async () => {\n  //     await fetch(`http://localhost:8000/notes/`, {\n  //       method: 'POST',\n  //       headers: {\n  //            'Content-type': 'application/json'\n  //       },\n  //       body: JSON.stringify({...note, 'updated': new Date()})\n  //     })\n  // }\n\n\n  let updateNote = async () => {\n    //let response = \n    await Axios.put('http://localhost:3001/updateNote', {\n      _id: noteId,\n      body: note.body\n    });\n    console.log('update request sent'); // let data = await response.data\n    // maybe the above makes it slower? but if not, will the list be updated in time ?\n    // console.log('update response data:', data)\n  }; //  async function updateNote() {\n  //   await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //     method: 'PUT',\n  //     headers: {\n  //       'Content-type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ ...note, 'updated': new Date() })\n  //   });\n  // }\n  // { params: {\n  //   _id:noteId,\n  //     } \n\n\n  let deleteNote = async () => {\n    await Axios.delete('http://localhost:3001/deleteNote', {\n      data: {\n        // another option was params: and req.query._id on the express side.\n        _id: noteId\n      }\n    }).then(response => {\n      // this handling still doesn't work... \n      console.log('response from delete req: ', response.data);\n    }, error => {\n      console.log(error);\n    });\n    console.log('delete request sent');\n    navigate('/');\n  }; //  let deleteNote = async (e) => {\n  //       await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //         method: 'DELETE',\n  //         headers: {\n  //             'Content-type': 'application/json'\n  //         },\n  //         body: JSON.stringify(note)\n  //       })\n  //       // e.preventDefault()\n  //       navigate('/')\n  //  }\n\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"handlesubmit fired\"); //console.log ('id and body:', noteId, note.body)\n\n    if (noteId === 'new' && note == null) {\n      navigate('/');\n      return;\n    } else if (noteId === 'new' && note.body !== null) {\n      createNote();\n      console.log('create');\n    } else if (noteId !== 'new' && note.body === '') {\n      deleteNote();\n      console.log('delete');\n    } else if (noteId !== 'new' && note.body !== null) {\n      updateNote();\n      console.log('update');\n    }\n\n    console.log('out of ifs');\n    navigate(\"/\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"note-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"\",\n          children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n            onClick: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 10\n      }, this), noteId !== 'new' ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteNote,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: note === null || note === void 0 ? void 0 : note.body,\n      onChange: e => setNote({ ...note,\n        'body': e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NotePage, \"xRslRYhbEpa7IMJ6ZKrs1A6SmbI=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = NotePage;\nexport default NotePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NotePage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","ReactComponent","ArrowLeft","useNavigate","Axios","NotePage","history","noteId","id","navigate","console","log","note","setNote","getNote","response","get","params","_id","data","createNote","post","body","then","error","alert","updateNote","put","deleteNote","delete","handleSubmit","e","preventDefault","target","value"],"sources":["/Users/dimetrius/Documents/ReactCrashCourse/mynotesMongo/client/src/pages/NotePage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { useParams } from 'react-router-dom';\n// import notes from '../assets/data';\nimport { Link } from 'react-router-dom';\nimport { ReactComponent as ArrowLeft } from '../assets/arrow-left.svg'\nimport { useNavigate} from \"react-router-dom\"\nimport Axios from \"axios\"\n//import { response } from 'express';\n\nconst NotePage = ({history}) => {\n  // let {id} = useParams();\n \n\n  let noteId= useParams().id;\n  // useParams() Returns an object of key/value pairs of the dynamic params from the current URL that were matched by the route path.\n  // id is for number that takes it's place., comes  from ListItem.\n  \n  const navigate = useNavigate()\n\n  //console.log(props);\n  //console.log(useParams);\n   console.log('NoteId: ', noteId);\n\n  \n  // let note = notes.find(note => note.id === Number(noteId));\n  \n  let [note, setNote] = useState (null)\n  // useState should be set at the top level of the component and never inside the useEffect\n\n   useEffect(() => {\n    getNote()\n     }, [])\n     // was [noteId]\n\n        \n\n     let getNote = async () => {\n      if (noteId === 'new') return\n      let response = await Axios.get('http://localhost:3001/getNote', \n      { params: {\n         _id:noteId,\n           } \n      })\n      let data = await response.data\n      setNote(data);\n      console.log(' Get data:', data)\n  }\n\n    // let getNote = async () => {\n    //   if (noteId === 'new') return\n    //   let response = await fetch (`http://localhost:8000/notes/${noteId}`)\n    //   console.log(response)\n    //   let data =  await response.json()\n    //   console.log('data from response: ', data)\n    //    setNote(data)\n      \n    // }\n    \n // console.log(note)\n\n\n const createNote = () => {Axios.post('http://localhost:3001/createNote', \n          {\n            body: note.body,\n            //updated: new Date()\n              } \n        ).then(\n           response => {\n             console.log(response);\n             // can be passage to notes to make quicker data update on the list page..... \n            }, \n            error => {\n              alert(error);\n            } );\n  };\n\n\n\n\n//   let createNote = async () => {\n//     await fetch(`http://localhost:8000/notes/`, {\n//       method: 'POST',\n//       headers: {\n//            'Content-type': 'application/json'\n//       },\n//       body: JSON.stringify({...note, 'updated': new Date()})\n\n//     })\n// }\n\n\n\nlet updateNote = async () => {\n  \n  //let response = \n  await Axios.put('http://localhost:3001/updateNote', \n  { \n     _id: noteId,\n     body: note.body,\n  })\n  console.log('update request sent')\n // let data = await response.data\n  // maybe the above makes it slower? but if not, will the list be updated in time ?\n // console.log('update response data:', data)\n}\n\n\n  //  async function updateNote() {\n  //   await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //     method: 'PUT',\n  //     headers: {\n  //       'Content-type': 'application/json'\n  //     },\n  //     body: JSON.stringify({ ...note, 'updated': new Date() })\n  //   });\n  // }\n\n  // { params: {\n  //   _id:noteId,\n  //     } \n\nlet deleteNote = async ()=> {\n  await Axios.delete('http://localhost:3001/deleteNote', \n  { data: {\n    // another option was params: and req.query._id on the express side.\n    _id:noteId,\n      } \n })\n .then ((response) => {\n   // this handling still doesn't work... \n      console.log('response from delete req: ', response.data)\n        },\n          error => {\n            console.log(error)\n          }  \n          )\n  console.log('delete request sent')\n  navigate('/')\n}\n\n\n  //  let deleteNote = async (e) => {\n  //       await fetch(`http://localhost:8000/notes/${noteId}`, {\n  //         method: 'DELETE',\n  //         headers: {\n  //             'Content-type': 'application/json'\n  //         },\n  //         body: JSON.stringify(note)\n\n  //       })\n  //       // e.preventDefault()\n  //       navigate('/')\n  //  }\n\n   async function handleSubmit(e) {\n    e.preventDefault();\n    console.log(\"handlesubmit fired\");\n    //console.log ('id and body:', noteId, note.body)\n    if (noteId === 'new' && note == null) {\n      navigate('/');\n      return;\n    } else if (noteId === 'new' && note.body !== null) {\n      createNote();\n      console.log('create');\n\n    } else if (noteId !== 'new' && note.body === '') {\n      deleteNote();\n      console.log('delete');\n    }\n    else if (noteId !== 'new' && note.body !== null) {\n      updateNote();\n      console.log('update');\n\n    }\n\n    console.log('out of ifs');\n    navigate(\"/\");\n  }\n\n  return (\n    <div className='note'>\n\n      <div className='note-header'>\n         <h3>\n            <Link to=\"\">\n              <ArrowLeft onClick={handleSubmit}/>\n            </Link>\n\n         </h3>\n          {noteId !=='new' ? (\n                <button onClick= {deleteNote}>Delete</button>\n          ): ( \n                <button onClick ={handleSubmit}>Done</button>\n          )}\n\n      </div>\n      <textarea value= {note?.body} onChange ={(e) => setNote({...note, 'body':e.target.value})}   >\n      {/* // if there is... */}\n        </textarea>\n    </div>\n  )\n}\n\nexport default NotePage\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}